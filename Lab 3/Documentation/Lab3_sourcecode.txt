HTML:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta t="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>


    <style>
        #map-canvas {
            height: 600px;
            /*width: 60%;
            margin-left: 20%;
            margin-right: 20%;*/
        }
        .form-control
        {
            width: auto;
        }
        .btn-direction{
            font-size: 16px;
            line-height: 2.1;
            padding: 0px;
            margin-left: 50px;
        }
    </style>
</head>

<body>

<div class="wrapp">
    <div class="col-md-12" style="padding-left: 40px !important; padding-top: 25px; text-align: center;">
        <input googlesourceplace style="margin-left: 340px;" ng-model="homeController.fromPlace" type="text" class="form-control col-md-3" placeholder="Enter Source Location" id="startlocation"/>
        <input googledestinationplace style="margin-left: 50px;" ng-model="homeController.toPlace" type="text" class="form-control col-md-3" placeholder="Enter Destination Location"  id="endlocation" />
        <button id="btnDirection" class="col-md-2 btn btn-success btn-sm btn-direction" ng-click="calcRoute()">
            Get Direction and Weather
        </button>
        <div class="col-md-2" style="margin-left: 100px;">
            Welcome {{homeController.userData.name}}
        </div>
        <div  class="col-md-2" class="dropdown">
        <img  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" src="" id="login_user_image" ng-click="homeController.showSignOut()" style="border-radius: 50%; height: 60px; width: 70px; margin-right: 30px; margin-left: 160px;">
            <ul ng-click="homeController.signOut()" class="dropdown-menu btn-success" style="margin-left: 120px; background-color: #5cb85c;" aria-labelledby="login_user_image">
                <li style="padding-left: 5px;">Sign Out</li>
            </ul>
        </div>
        <input type="hidden" id="fromcityLat" name="fromcityLat" />
        <input type="hidden" id="fromcityLng" name="fromcityLng" />
        <input type="hidden" id="tocityLat" name="tocityLat" />
        <input type="hidden" id="tocityLng" name="tocityLng" />
        <br/></br>
    </div>
<div class="col-md-12">
    <div class="col-md-2" style="border: 2px solid #ddd; margin-top: 10%; background-color: #ddd; margin-right: 20px; margin-left: 30px;">
        <p>Source Location Weather</p>
        <p>City: {{homeController.fromCity}} </p>
        <p>State: {{homeController.fromState}}</p>
        <p class="currentConditions" ng-bind-html="homeController.currentfromcityweather.html"></p>
        <div class="currentIcon" ng-bind-html="homeController.fromcurrentIcon.html"></div>
    </div>
    <div class="col-md-7" id="map-canvas" style="display: block;"></div>
    <div class="col-md-2" style="border: 2px solid #ddd; margin-top: 10%; background-color: #ddd; margin-left: 20px;">
        <p>Destination Location Weather</p>
        <p>City: {{homeController.toCity}} </p>
        <p>State: {{homeController.toState}}</p>
        <p class="currentConditions" ng-bind-html="homeController.currenttocityweather.html"></p>
        <div class="currentIcon" ng-bind-html="homeController.tocurrentIcon.html"></div>
    </div>
</div>
</div>
</body>
</html>

JS:

/**
 * Created by deven on 1/28/2017.
 */
var socialNetwork = angular.module('socialNetwork', ['ngRoute', 'ngSanitize']);
var gPictureSrc = '';
var gUserData = '';

socialNetwork.config(function($routeProvider) {
    $routeProvider
        .when('/', {
            templateUrl: 'login.html',
            controller: 'loginController',
            controllerAs: 'loginController'
        })
        .when('/about', {
            templateUrl: 'about.html',
            controller: 'aboutController'
        })
        .when('/home', {
            templateUrl: 'home.html',
            controller: 'homeController',
            controllerAs: 'homeController'
        })
        .otherwise({ redirectTo: '/' });

});

function previewFile() {
    var preview = document.getElementById('user_image'); //selects the query named img
    var file    = document.querySelector('input[type=file]').files[0]; //sames as here
    var reader  = new FileReader();

    reader.onloadend = function () {
        preview.src = reader.result;
        gPictureSrc = preview.src;
    }

    if (file) {
        reader.readAsDataURL(file); //reads the data as a URL
    } else {
        preview.src = "";
    }
};


socialNetwork.directive('onlyDigits', function () {
    return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, element, attrs, modelCtrl) {
            modelCtrl.$parsers.push(function (inputValue) {
                if (inputValue == undefined) return '';
                var transformedInput = inputValue.replace(/[^0-9]/g, '');
                if (transformedInput !== inputValue) {
                    modelCtrl.$setViewValue(transformedInput);
                    modelCtrl.$render();
                }
                return transformedInput;
            });
        }
    };

});
socialNetwork.directive('googlesourceplace', function() {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, model) {
            var options = {
                types: [],
                componentRestrictions: {}
            };
            scope.gFromPlace = new google.maps.places.Autocomplete(element[0], options);

            google.maps.event.addListener(scope.gFromPlace, 'place_changed', function() {
                scope.$apply(function() {
                    model.$setViewValue(element.val());
                    var place = scope.gFromPlace.getPlace();
                    document.getElementById('fromcityLat').value = place.geometry.location.lat();
                    document.getElementById('fromcityLng').value = place.geometry.location.lng();
                });
            });
        }
    };

});
socialNetwork.directive('googledestinationplace', function() {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, model) {
            var options = {
                types: [],
                componentRestrictions: {}
            };
            scope.gToPlace = new google.maps.places.Autocomplete(element[0], options);

            google.maps.event.addListener(scope.gToPlace, 'place_changed', function() {
                scope.$apply(function() {
                    model.$setViewValue(element.val());
                    var place = scope.gToPlace.getPlace();
                    document.getElementById('tocityLat').value = place.geometry.location.lat();
                    document.getElementById('tocityLng').value = place.geometry.location.lng();
                });
            });
        }
    };

});


/**
 * Created by deven on 1/29/2017.
 */

socialNetwork.controller('homeController', ['$scope', '$location', '$timeout', '$http', '$window', function($scope, $location, $timeout, $http, $window) {

    var homeController = this;
   //


    var map;
    var mapOptions;

    $scope.gFromPlace;
    $scope.gToPlace;

    $window.document.title = "Home";

    homeController.userData = gUserData;

    var loginUserImage = document.getElementById('login_user_image');
    loginUserImage.src = gUserData.Picture;

    var directionsDisplay = new google.maps.DirectionsRenderer({
        draggable: true
    });
    var directionsService = new google.maps.DirectionsService();

    homeController.signOut = function () {
        $location.path("login");
    };


    $scope.initialize = function () {
        var pos = new google.maps.LatLng(0, 0);
        var mapOptions = {
            zoom: 5,
            center: pos
        };

        map = new google.maps.Map(document.getElementById('map-canvas'));

        map.setCenter(new google.maps.LatLng(41.850033, -87.6500523));
        map.setZoom(4);
    };
    $scope.calcRoute = function () {
        var end = document.getElementById('endlocation').value;
        var start = document.getElementById('startlocation').value;

        var request = {
            origin: start,
            destination: end,
            travelMode: google.maps.TravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setMap(map);
                directionsDisplay.setDirections(response);
                console.log(status);
            }

        });

        $scope.getWeather($('#fromcityLat').val(), $('#fromcityLng').val(), 'from');
        $scope.getWeather($('#tocityLat').val(), $('#tocityLng').val(), 'to');
    };

    $scope.initialize();

    $scope.getWeather = function(lat, long, flag) {
        $http.get('http://api.wunderground.com/api/c3bb2ca8a46574cb/geolookup/q/' + parseFloat(lat) +',' + parseFloat(long)+'.json').then(function (response) {
            var data =  response.data;
            console.log(data);
            var city = data.location.city.replace(' ', '_');
            var state = data.location.state;
            if(flag === 'from'){
                homeController.fromCity = data.location.city;
                homeController.fromState = data.location.state;
            }
            else if(flag === 'to')
            {
                homeController.toCity = data.location.city;
                homeController.toState = data.location.state;
            }
            $scope.getWeatherData(city, state, flag);
        })
    };

    $scope.getWeatherData = function(city, state, flag) {
        $http.get('http://api.wunderground.com/api/c3bb2ca8a46574cb/conditions/q/' + state + '/' + city + '.json?noCache=false').then(function (response) {
            var data = response.data;
            temp = data.current_observation.temp_f;
            icon = data.current_observation.icon_url;
            weather = data.current_observation.weather;
            if (flag === 'from') {
            homeController.currentfromcityweather = {
                html: "Currently " + temp + " &deg; F and " + weather + ""
            };
                homeController.fromcurrentIcon = {
                    html: "<img src='" + icon + "'/>"
                }
        }
            else if(flag === 'to'){
                homeController.currenttocityweather = {
                    html: "Currently " + temp + " &deg; F and " + weather + ""
                };
                homeController.tocurrentIcon = {
                    html: "<img src='" + icon + "'/>"
                }
            }
        })
    };
}]);

Styles:



.panel-default {
    opacity: 0.9;
    margin-top:30px;
}
.form-group.last { margin-bottom:0px; }

/*
/* Created by Filipe Pina
 * Specific styles of signin, register, component
 */
/*
 * General styles
 */
#playground-container {
    height: 500px;
    overflow: hidden !important;
    -webkit-overflow-scrolling: touch;
}
body, html{
    height: 100%;
    background-repeat: no-repeat;
    background:url(https://i.ytimg.com/vi/4kfXjatgeEU/maxresdefault.jpg);
    font-family: 'Oxygen', sans-serif;
    background-size: cover;
}

.main{
    margin:50px 15px;
}

h1.title {
    font-size: 50px;
    font-family: 'Passion One', cursive;
    font-weight: 400;
}

hr{
    width: 10%;
    color: #fff;
}

.form-group{
    margin-bottom: 15px;
}

label{
    margin-bottom: 15px;
}

input,
input::-webkit-input-placeholder {
    font-size: 11px;
    padding-top: 3px;
}

.main-login{
    background-color: #fff;
    /* shadows and rounded borders */
    -moz-border-radius: 2px;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);

}
.form-control {
    height: auto!important;
    padding: 8px 12px !important;
}
.input-group {
    -webkit-box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.21)!important;
    -moz-box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.21)!important;
    box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.21)!important;
}
#button {
    border: 1px solid #ccc;
    margin-top: 28px;
    padding: 6px 12px;
    color: #666;
    text-shadow: 0 1px #fff;
    cursor: pointer;
    -moz-border-radius: 3px 3px;
    -webkit-border-radius: 3px 3px;
    border-radius: 3px 3px;
    -moz-box-shadow: 0 1px #fff inset, 0 1px #ddd;
    -webkit-box-shadow: 0 1px #fff inset, 0 1px #ddd;
    box-shadow: 0 1px #fff inset, 0 1px #ddd;
    background: #f5f5f5;
    background: -moz-linear-gradient(top, #f5f5f5 0%, #eeeeee 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #f5f5f5), color-stop(100%, #eeeeee));
    background: -webkit-linear-gradient(top, #f5f5f5 0%, #eeeeee 100%);
    background: -o-linear-gradient(top, #f5f5f5 0%, #eeeeee 100%);
    background: -ms-linear-gradient(top, #f5f5f5 0%, #eeeeee 100%);
    background: linear-gradient(top, #f5f5f5 0%, #eeeeee 100%);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#f5f5f5', endColorstr='#eeeeee', GradientType=0);
}
.main-center{
    margin-top: 30px;
    margin: 0 auto;
    max-width: 400px;
    padding: 10px 40px;
    background:#009edf;
    color: #FFF;
    text-shadow: none;
    -webkit-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.31);
    -moz-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.31);
    box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.31);

}
span.input-group-addon i {
    color: #009edf;
    font-size: 17px;
}

.login-button{
    margin-top: 5px;
}

.login-register{
    font-size: 11px;
    text-align: center;
}
.login_body {
    background: url(../Images/KansasCity_Downtown.jpg) no-repeat center center fixed;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}
.weatherModule {
    background:#f2f2f2;
    height:150px;
    width:250px;
    border: 1px dashed #ccc;
    padding: 1em;
}


.currentConditions {
    float: left;
}
.weatherModule {
    padding: 1em;
}

.currentIcon {
    float: left;
    margin: 0 .75em;
}



